{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","onKeyPress","event","which","search","state","term","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a868a03.chunk.js","sourcesContent":["const redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\n\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } \n\n        // check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        const clientId = '04da9bcff9ba47f09b45b9c008d91c3e';\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            // This is going to clear the parameters, allowing us to grab a new access token when it expires. \n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }))\n        })\n    },\n\n    savePlayList(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n        })\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\n\nexport class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    onKeyPress = (event) => {\n        if(event.which === 13) {\n          this.search(event);\n        }\n    } \n\n    search() {\n       this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(e) {\n        this.setState({ term: e.target.value });\n    }\n    \n    \n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\"\n                    onChange={this.handleTermChange} onKeyPress={this.onKeyPress} />\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Track.css';\n\n\nexport class Track extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './TrackList.css';\n\nimport { Track } from '../Track/Track';\n\nexport class TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track \n                            track={track} \n                            key={track.id} \n                            onAdd={this.props.onAdd}\n                            onRemove={this.props.onRemove}\n                            isRemoval={this.props.isRemoval} />})\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './SearchResults.css';\n\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList \n                    tracks={this.props.searchResults} \n                    onAdd={this.props.onAdd}\n                    isRemoval={false}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Playlist.css';\n\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n\n    handleNameChange(e) {\n        this.props.onNameChange(e.target.value);\n    }\n    \n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input \n                    defaultValue={'New Playlist'}\n                    onNameChange={this.props.onNameChange}\n                    onChange={this.handleNameChange} />\n                <TrackList \n                    tracks={this.props.playlistTracks}\n                    onRemove={this.props.onRemove}\n                    isRemoval={true} />\n                <button \n                    className=\"Playlist-save\"\n                    onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport { Playlist } from '../Playlist/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [], \n      \n      playlistName: 'My Playlist',\n      \n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } \n\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack} />\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}